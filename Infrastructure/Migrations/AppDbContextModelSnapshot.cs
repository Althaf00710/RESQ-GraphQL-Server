// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Civilian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CivilianStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NicNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CivilianStatusId");

                    b.ToTable("Civilians");
                });

            modelBuilder.Entity("Core.Models.CivilianLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CivilianId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CivilianId");

                    b.ToTable("CivilianLocations");
                });

            modelBuilder.Entity("Core.Models.CivilianStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CivilianStatuses");
                });

            modelBuilder.Entity("Core.Models.CivilianStatusRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CivilianId")
                        .HasColumnType("int");

                    b.Property<int>("CivilianStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("proofImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CivilianId");

                    b.HasIndex("CivilianStatusId");

                    b.ToTable("CivilianTypeRequests");
                });

            modelBuilder.Entity("Core.Models.FirstAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("FirstAids");
                });

            modelBuilder.Entity("Core.Models.RescueVehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RescueVehicleTypes");
                });

            modelBuilder.Entity("Core.Models.SnakeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SnakeTypes");
                });

            modelBuilder.Entity("Core.models.FirstAidCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FirstAidCategories");
                });

            modelBuilder.Entity("Core.models.FirstAidDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FirstAidId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Point")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FirstAidId");

                    b.ToTable("FirstAidDetails");
                });

            modelBuilder.Entity("Core.models.RescueVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RescueVehicleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RescueVehicleTypeId");

                    b.ToTable("RescueVehicles");
                });

            modelBuilder.Entity("Core.models.RescueVehicleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RescueVehicleId")
                        .HasColumnType("int");

                    b.Property<int>("RescueVehicleRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RescueVehicleId");

                    b.HasIndex("RescueVehicleRequestId");

                    b.ToTable("RescueVehicleAssignments");
                });

            modelBuilder.Entity("Core.models.RescueVehicleLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("RescueVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RescueVehicleId");

                    b.ToTable("RescueVehicleLocations");
                });

            modelBuilder.Entity("Core.models.RescueVehicleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CivilianId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proofImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CivilianId");

                    b.ToTable("RescueVehicleRequests");
                });

            modelBuilder.Entity("Core.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastActive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.Civilian", b =>
                {
                    b.HasOne("Core.Models.CivilianStatus", "CivilianStatus")
                        .WithMany("Civilians")
                        .HasForeignKey("CivilianStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CivilianStatus");
                });

            modelBuilder.Entity("Core.Models.CivilianLocation", b =>
                {
                    b.HasOne("Core.Models.Civilian", "Civilian")
                        .WithMany("CivilianLocations")
                        .HasForeignKey("CivilianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Civilian");
                });

            modelBuilder.Entity("Core.Models.CivilianStatusRequest", b =>
                {
                    b.HasOne("Core.Models.Civilian", "Civilian")
                        .WithMany("CivilianTypeRequests")
                        .HasForeignKey("CivilianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Models.CivilianStatus", "CivilianStatus")
                        .WithMany("CivilianTypeRequests")
                        .HasForeignKey("CivilianStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Civilian");

                    b.Navigation("CivilianStatus");
                });

            modelBuilder.Entity("Core.Models.FirstAid", b =>
                {
                    b.HasOne("Core.models.FirstAidCategory", "FirstAidCategory")
                        .WithMany("FirstAids")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstAidCategory");
                });

            modelBuilder.Entity("Core.models.FirstAidDetail", b =>
                {
                    b.HasOne("Core.Models.FirstAid", "FirstAid")
                        .WithMany("FirstAidDetails")
                        .HasForeignKey("FirstAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstAid");
                });

            modelBuilder.Entity("Core.models.RescueVehicle", b =>
                {
                    b.HasOne("Core.Models.RescueVehicleType", "RescueVehicleType")
                        .WithMany("RescueVehicles")
                        .HasForeignKey("RescueVehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RescueVehicleType");
                });

            modelBuilder.Entity("Core.models.RescueVehicleAssignment", b =>
                {
                    b.HasOne("Core.models.RescueVehicle", "RescueVehicle")
                        .WithMany("RescueVehicleAssignment")
                        .HasForeignKey("RescueVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.models.RescueVehicleRequest", "RescueVehicleRequest")
                        .WithMany("RescueVehicleAssignments")
                        .HasForeignKey("RescueVehicleRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RescueVehicle");

                    b.Navigation("RescueVehicleRequest");
                });

            modelBuilder.Entity("Core.models.RescueVehicleLocation", b =>
                {
                    b.HasOne("Core.models.RescueVehicle", "RescueVehicle")
                        .WithMany("RescueVehicleLocations")
                        .HasForeignKey("RescueVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RescueVehicle");
                });

            modelBuilder.Entity("Core.models.RescueVehicleRequest", b =>
                {
                    b.HasOne("Core.Models.Civilian", "Civilian")
                        .WithMany("RescueVehicleRequests")
                        .HasForeignKey("CivilianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Civilian");
                });

            modelBuilder.Entity("Core.Models.Civilian", b =>
                {
                    b.Navigation("CivilianLocations");

                    b.Navigation("CivilianTypeRequests");

                    b.Navigation("RescueVehicleRequests");
                });

            modelBuilder.Entity("Core.Models.CivilianStatus", b =>
                {
                    b.Navigation("CivilianTypeRequests");

                    b.Navigation("Civilians");
                });

            modelBuilder.Entity("Core.Models.FirstAid", b =>
                {
                    b.Navigation("FirstAidDetails");
                });

            modelBuilder.Entity("Core.Models.RescueVehicleType", b =>
                {
                    b.Navigation("RescueVehicles");
                });

            modelBuilder.Entity("Core.models.FirstAidCategory", b =>
                {
                    b.Navigation("FirstAids");
                });

            modelBuilder.Entity("Core.models.RescueVehicle", b =>
                {
                    b.Navigation("RescueVehicleAssignment");

                    b.Navigation("RescueVehicleLocations");
                });

            modelBuilder.Entity("Core.models.RescueVehicleRequest", b =>
                {
                    b.Navigation("RescueVehicleAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
